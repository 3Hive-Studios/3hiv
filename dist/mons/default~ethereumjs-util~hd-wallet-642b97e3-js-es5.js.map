{"version":3,"sources":["webpack:///node_modules/bnc-onboard/node_modules/ethereumjs-util/dist/helpers.js","webpack:///node_modules/bnc-onboard/node_modules/ethereumjs-util/dist/bytes.js","webpack:///node_modules/bnc-onboard/node_modules/ethereumjs-util/dist/constants.js","webpack:///node_modules/bnc-onboard/node_modules/ethereumjs-util/dist/account.js","webpack:///node_modules/bnc-onboard/node_modules/ethereumjs-util/dist/types.js","webpack:///node_modules/bnc-onboard/node_modules/ethereumjs-util/dist/object.js","webpack:///node_modules/bnc-onboard/node_modules/ethereumjs-util/dist/signature.js","webpack:///node_modules/bnc-onboard/node_modules/ethereumjs-util/dist/index.js","webpack:///node_modules/bnc-onboard/node_modules/ethereumjs-util/dist/address.js","webpack:///node_modules/bnc-onboard/node_modules/ethereumjs-util/dist/hash.js","webpack:///node_modules/bnc-onboard/node_modules/ethereumjs-util/dist/externals.js"],"names":["Object","defineProperty","exports","value","assertIsString","assertIsArray","assertIsBuffer","assertIsHexString","ethjs_util_1","input","isHexString","msg","Error","Buffer","isBuffer","Array","isArray","baToJSON","addHexPrefix","toUnsigned","fromSigned","bufferToHex","bufferToInt","toBuffer","unpadHexString","unpadArray","unpadBuffer","setLengthRight","setLengthLeft","zeros","BN","helpers_1","bytes","allocUnsafe","fill","length","setLength","right","buf","copy","slice","a","stripZeros","stripHexPrefix","first","toString","v","undefined","from","Uint8Array","padToEven","intToBuffer","isBN","toArrayLike","toArray","toNumber","num","fromTwos","toTwos","str","isHexPrefixed","ba","array","i","push","KECCAK256_RLP","KECCAK256_RLP_S","KECCAK256_RLP_ARRAY","KECCAK256_RLP_ARRAY_S","KECCAK256_NULL","KECCAK256_NULL_S","TWO_POW256","MAX_INTEGER","isZeroAddress","zeroAddress","importPublic","privateToPublic","privateToAddress","publicToAddress","pubToAddress","isValidPublic","isValidPrivate","generateAddress2","generateAddress","isValidChecksumAddress","toChecksumAddress","isValidAddress","Account","assert","rlp","constants_1","bytes_1","hash_1","types_1","_a","privateKeyVerify","publicKeyCreate","publicKeyVerify","publicKeyConvert","nonce","balance","stateRoot","codeHash","_validate","fromAccountData","accountData","fromRlpSerializedAccount","serialized","values","decode","fromValuesArray","prototype","lt","serialize","encode","bnToRlp","isContract","equals","isEmpty","isZero","hexAddress","test","eip1191ChainId","address","toLowerCase","prefix","hash","keccakFromString","ret","parseInt","toUpperCase","nonceBN","rlphash","salt","initCode","keccak256","concat","privateKey","publicKey","sanitize","pubKey","keccak","addressLength","addr","zeroAddr","defineProperties","ethjsUtil","self","fields","data","raw","_fields","toJSON","label","obj_1","forEach","field","name","getter","setter","allowZero","allowLess","enumerable","configurable","get","set","alias","d","keys_1","keys","indexOf","hashPersonalMessage","isValidSignature","fromRpcSig","toRpcSig","ecrecover","ecsign","ecdsaSign","ecdsaRecover","msgHash","chainId","sig","recovery","recid","r","signature","s","calculateSigRecovery","isValidSigRecovery","senderPubKey","homesteadOrLater","SECP256K1_N_DIV_2","SECP256K1_N","rBN","sBN","gt","cmp","message","__createBinding","create","o","m","k","k2","__exportStar","p","hasOwnProperty","Address","account_1","zero","fromString","fromPublicKey","fromPrivateKey","generate","generate2","ripemd160FromArray","ripemd160FromString","ripemd160","sha256FromArray","sha256FromString","sha256","keccakFromArray","keccakFromHexString","keccak224","keccak384","k256","keccak512","createHash","bits","_sha256","update","digest","padded","_ripemd160"],"mappings":"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","file":"default~ethereumjs-util~hd-wallet-642b97e3-js-es5.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.assertIsString = exports.assertIsArray = exports.assertIsBuffer = exports.assertIsHexString = void 0;\nvar ethjs_util_1 = require(\"ethjs-util\");\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */\nexports.assertIsHexString = function (input) {\n    if (!ethjs_util_1.isHexString(input)) {\n        var msg = \"This method only supports 0x-prefixed hex strings but input was: \" + input;\n        throw new Error(msg);\n    }\n};\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\nexports.assertIsBuffer = function (input) {\n    if (!Buffer.isBuffer(input)) {\n        var msg = \"This method only supports Buffer but input was: \" + input;\n        throw new Error(msg);\n    }\n};\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */\nexports.assertIsArray = function (input) {\n    if (!Array.isArray(input)) {\n        var msg = \"This method only supports number arrays but input was: \" + input;\n        throw new Error(msg);\n    }\n};\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */\nexports.assertIsString = function (input) {\n    if (typeof input !== 'string') {\n        var msg = \"This method only supports strings but input was: \" + input;\n        throw new Error(msg);\n    }\n};\n//# sourceMappingURL=helpers.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.baToJSON = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = void 0;\nvar BN = require(\"bn.js\");\nvar ethjs_util_1 = require(\"ethjs-util\");\nvar helpers_1 = require(\"./helpers\");\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */\nexports.zeros = function (bytes) {\n    return Buffer.allocUnsafe(bytes).fill(0);\n};\n/**\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nexports.setLengthLeft = function (msg, length) {\n    helpers_1.assertIsBuffer(msg);\n    return setLength(msg, length, false);\n};\n/**\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nexports.setLengthRight = function (msg, length) {\n    helpers_1.assertIsBuffer(msg);\n    return setLength(msg, length, true);\n};\n/**\n * Pads a `Buffer` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer)\n */\nvar setLength = function (msg, length, right) {\n    var buf = exports.zeros(length);\n    if (right) {\n        if (msg.length < length) {\n            msg.copy(buf);\n            return buf;\n        }\n        return msg.slice(0, length);\n    }\n    else {\n        if (msg.length < length) {\n            msg.copy(buf, length - msg.length);\n            return buf;\n        }\n        return msg.slice(-length);\n    }\n};\n/**\n * Trims leading zeros from a `Buffer`.\n * @param a (Buffer)\n * @return (Buffer)\n */\nexports.unpadBuffer = function (a) {\n    helpers_1.assertIsBuffer(a);\n    return stripZeros(a);\n};\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param a (number[])\n * @return (number[])\n */\nexports.unpadArray = function (a) {\n    helpers_1.assertIsArray(a);\n    return stripZeros(a);\n};\n/**\n * Trims leading zeros from a hex-prefixed `String`.\n * @param a (String)\n * @return (String)\n */\nexports.unpadHexString = function (a) {\n    helpers_1.assertIsHexString(a);\n    a = ethjs_util_1.stripHexPrefix(a);\n    return stripZeros(a);\n};\n/**\n * Trims leading zeros from a `Buffer`, `String` or `Number[]`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\nvar stripZeros = function (a) {\n    var first = a[0];\n    while (a.length > 0 && first.toString() === '0') {\n        a = a.slice(1);\n        first = a[0];\n    }\n    return a;\n};\n/**\n * Attempts to turn a value into a `Buffer`.\n * Inputs supported: `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` or `toBuffer()` method.\n * @param v the value\n */\nexports.toBuffer = function (v) {\n    if (v === null || v === undefined) {\n        return Buffer.allocUnsafe(0);\n    }\n    if (Buffer.isBuffer(v)) {\n        return Buffer.from(v);\n    }\n    if (Array.isArray(v) || v instanceof Uint8Array) {\n        return Buffer.from(v);\n    }\n    if (typeof v === 'string') {\n        if (!ethjs_util_1.isHexString(v)) {\n            throw new Error(\"Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: \" + v);\n        }\n        return Buffer.from(ethjs_util_1.padToEven(ethjs_util_1.stripHexPrefix(v)), 'hex');\n    }\n    if (typeof v === 'number') {\n        return ethjs_util_1.intToBuffer(v);\n    }\n    if (BN.isBN(v)) {\n        return v.toArrayLike(Buffer);\n    }\n    if (v.toArray) {\n        // converts a BN to a Buffer\n        return Buffer.from(v.toArray());\n    }\n    if (v.toBuffer) {\n        return Buffer.from(v.toBuffer());\n    }\n    throw new Error('invalid type');\n};\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\nexports.bufferToInt = function (buf) {\n    return new BN(exports.toBuffer(buf)).toNumber();\n};\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */\nexports.bufferToHex = function (buf) {\n    buf = exports.toBuffer(buf);\n    return '0x' + buf.toString('hex');\n};\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */\nexports.fromSigned = function (num) {\n    return new BN(num).fromTwos(256);\n};\n/**\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */\nexports.toUnsigned = function (num) {\n    return Buffer.from(num.toTwos(256).toArray());\n};\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\nexports.addHexPrefix = function (str) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return ethjs_util_1.isHexPrefixed(str) ? str : '0x' + str;\n};\n/**\n * Converts a `Buffer` or `Array` to JSON.\n * @param ba (Buffer|Array)\n * @return (Array|String|null)\n */\nexports.baToJSON = function (ba) {\n    if (Buffer.isBuffer(ba)) {\n        return \"0x\" + ba.toString('hex');\n    }\n    else if (ba instanceof Array) {\n        var array = [];\n        for (var i = 0; i < ba.length; i++) {\n            array.push(exports.baToJSON(ba[i]));\n        }\n        return array;\n    }\n};\n//# sourceMappingURL=bytes.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KECCAK256_RLP = exports.KECCAK256_RLP_S = exports.KECCAK256_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY_S = exports.KECCAK256_NULL = exports.KECCAK256_NULL_S = exports.TWO_POW256 = exports.MAX_INTEGER = void 0;\nvar Buffer = require('buffer').Buffer;\nvar BN = require(\"bn.js\");\n/**\n * The max integer that this VM can handle\n */\nexports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);\n/**\n * 2^256\n */\nexports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);\n/**\n * Keccak-256 hash of null\n */\nexports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n/**\n * Keccak-256 hash of null\n */\nexports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');\n/**\n * Keccak-256 of an RLP of an empty array\n */\nexports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';\n/**\n * Keccak-256 of an RLP of an empty array\n */\nexports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');\n/**\n * Keccak-256 hash of the RLP of null\n */\nexports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';\n/**\n * Keccak-256 hash of the RLP of null\n */\nexports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');\n//# sourceMappingURL=constants.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isZeroAddress = exports.zeroAddress = exports.importPublic = exports.privateToPublic = exports.privateToAddress = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isValidAddress = exports.Account = void 0;\nvar assert = require(\"assert\");\nvar BN = require(\"bn.js\");\nvar rlp = require(\"rlp\");\nvar ethjs_util_1 = require(\"ethjs-util\");\nvar constants_1 = require(\"./constants\");\nvar bytes_1 = require(\"./bytes\");\nvar hash_1 = require(\"./hash\");\nvar helpers_1 = require(\"./helpers\");\nvar types_1 = require(\"./types\");\nvar _a = require('ethereum-cryptography/secp256k1'), privateKeyVerify = _a.privateKeyVerify, publicKeyCreate = _a.publicKeyCreate, publicKeyVerify = _a.publicKeyVerify, publicKeyConvert = _a.publicKeyConvert;\nvar Account = /** @class */ (function () {\n    /**\n     * This constructor assigns and validates the values.\n     * Use the static factory methods to assist in creating an Account from varying data types.\n     */\n    function Account(nonce, balance, stateRoot, codeHash) {\n        if (nonce === void 0) { nonce = new BN(0); }\n        if (balance === void 0) { balance = new BN(0); }\n        if (stateRoot === void 0) { stateRoot = constants_1.KECCAK256_RLP; }\n        if (codeHash === void 0) { codeHash = constants_1.KECCAK256_NULL; }\n        this.nonce = nonce;\n        this.balance = balance;\n        this.stateRoot = stateRoot;\n        this.codeHash = codeHash;\n        this._validate();\n    }\n    Account.fromAccountData = function (accountData) {\n        var nonce = accountData.nonce, balance = accountData.balance, stateRoot = accountData.stateRoot, codeHash = accountData.codeHash;\n        return new Account(nonce ? new BN(bytes_1.toBuffer(nonce)) : undefined, balance ? new BN(bytes_1.toBuffer(balance)) : undefined, stateRoot ? bytes_1.toBuffer(stateRoot) : undefined, codeHash ? bytes_1.toBuffer(codeHash) : undefined);\n    };\n    Account.fromRlpSerializedAccount = function (serialized) {\n        var values = rlp.decode(serialized);\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized account input. Must be array');\n        }\n        return this.fromValuesArray(values);\n    };\n    Account.fromValuesArray = function (values) {\n        var nonce = values[0], balance = values[1], stateRoot = values[2], codeHash = values[3];\n        return new Account(nonce ? new BN(nonce) : undefined, balance ? new BN(balance) : undefined, stateRoot, codeHash);\n    };\n    Account.prototype._validate = function () {\n        if (this.nonce.lt(new BN(0))) {\n            throw new Error('nonce must be greater than zero');\n        }\n        if (this.balance.lt(new BN(0))) {\n            throw new Error('balance must be greater than zero');\n        }\n        if (this.stateRoot.length !== 32) {\n            throw new Error('stateRoot must have a length of 32');\n        }\n        if (this.codeHash.length !== 32) {\n            throw new Error('codeHash must have a length of 32');\n        }\n    };\n    /**\n     * Returns the RLP serialization of the account as a `Buffer`.\n     */\n    Account.prototype.serialize = function () {\n        return rlp.encode([types_1.bnToRlp(this.nonce), types_1.bnToRlp(this.balance), this.stateRoot, this.codeHash]);\n    };\n    /**\n     * Returns a `Boolean` determining if the account is a contract.\n     */\n    Account.prototype.isContract = function () {\n        return !this.codeHash.equals(constants_1.KECCAK256_NULL);\n    };\n    /**\n     * Returns a `Boolean` determining if the account is empty.\n     * For more details about account emptiness see [EIP-161](https://eips.ethereum.org/EIPS/eip-161).\n     * Note: The stateRoot is also checked to be empty since in Frontier it was possible to create a contract with no code where nonce remained 0 but some values were written to storage in the constructor (thus stateRoot is not KECCAK256_RLP).\n     */\n    Account.prototype.isEmpty = function () {\n        return (this.balance.isZero() &&\n            this.nonce.isZero() &&\n            this.stateRoot.equals(constants_1.KECCAK256_RLP) &&\n            this.codeHash.equals(constants_1.KECCAK256_NULL));\n    };\n    return Account;\n}());\nexports.Account = Account;\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too.\n */\nexports.isValidAddress = function (hexAddress) {\n    helpers_1.assertIsHexString(hexAddress);\n    return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);\n};\n/**\n * Returns a checksummed address.\n *\n * If a eip1191ChainId is provided, the chainId will be included in the checksum calculation. This\n * has the effect of checksummed addresses for one chain having invalid checksums for others.\n * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).\n *\n * WARNING: Checksums with and without the chainId will differ. As of 2019-06-26, the most commonly\n * used variation in Ethereum was without the chainId. This may change in the future.\n */\nexports.toChecksumAddress = function (hexAddress, eip1191ChainId) {\n    helpers_1.assertIsHexString(hexAddress);\n    var address = ethjs_util_1.stripHexPrefix(hexAddress).toLowerCase();\n    var prefix = eip1191ChainId !== undefined ? eip1191ChainId.toString() + '0x' : '';\n    var hash = hash_1.keccakFromString(prefix + address).toString('hex');\n    var ret = '0x';\n    for (var i = 0; i < address.length; i++) {\n        if (parseInt(hash[i], 16) >= 8) {\n            ret += address[i].toUpperCase();\n        }\n        else {\n            ret += address[i];\n        }\n    }\n    return ret;\n};\n/**\n * Checks if the address is a valid checksummed address.\n *\n * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.\n */\nexports.isValidChecksumAddress = function (hexAddress, eip1191ChainId) {\n    return exports.isValidAddress(hexAddress) && exports.toChecksumAddress(hexAddress, eip1191ChainId) === hexAddress;\n};\n/**\n * Generates an address of a newly created contract.\n * @param from The address which is creating this new address\n * @param nonce The nonce of the from account\n */\nexports.generateAddress = function (from, nonce) {\n    helpers_1.assertIsBuffer(from);\n    helpers_1.assertIsBuffer(nonce);\n    var nonceBN = new BN(nonce);\n    if (nonceBN.isZero()) {\n        // in RLP we want to encode null in the case of zero nonce\n        // read the RLP documentation for an answer if you dare\n        return hash_1.rlphash([from, null]).slice(-20);\n    }\n    // Only take the lower 160bits of the hash\n    return hash_1.rlphash([from, Buffer.from(nonceBN.toArray())]).slice(-20);\n};\n/**\n * Generates an address for a contract created using CREATE2.\n * @param from The address which is creating this new address\n * @param salt A salt\n * @param initCode The init code of the contract being created\n */\nexports.generateAddress2 = function (from, salt, initCode) {\n    helpers_1.assertIsBuffer(from);\n    helpers_1.assertIsBuffer(salt);\n    helpers_1.assertIsBuffer(initCode);\n    assert(from.length === 20);\n    assert(salt.length === 32);\n    var address = hash_1.keccak256(Buffer.concat([Buffer.from('ff', 'hex'), from, salt, hash_1.keccak256(initCode)]));\n    return address.slice(-20);\n};\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n */\nexports.isValidPrivate = function (privateKey) {\n    return privateKeyVerify(privateKey);\n};\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nexports.isValidPublic = function (publicKey, sanitize) {\n    if (sanitize === void 0) { sanitize = false; }\n    helpers_1.assertIsBuffer(publicKey);\n    if (publicKey.length === 64) {\n        // Convert to SEC1 for secp256k1\n        return publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));\n    }\n    if (!sanitize) {\n        return false;\n    }\n    return publicKeyVerify(publicKey);\n};\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nexports.pubToAddress = function (pubKey, sanitize) {\n    if (sanitize === void 0) { sanitize = false; }\n    helpers_1.assertIsBuffer(pubKey);\n    if (sanitize && pubKey.length !== 64) {\n        pubKey = Buffer.from(publicKeyConvert(pubKey, false).slice(1));\n    }\n    assert(pubKey.length === 64);\n    // Only take the lower 160bits of the hash\n    return hash_1.keccak(pubKey).slice(-20);\n};\nexports.publicToAddress = exports.pubToAddress;\n/**\n * Returns the ethereum address of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nexports.privateToAddress = function (privateKey) {\n    return exports.publicToAddress(exports.privateToPublic(privateKey));\n};\n/**\n * Returns the ethereum public key of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nexports.privateToPublic = function (privateKey) {\n    helpers_1.assertIsBuffer(privateKey);\n    // skip the type flag and use the X, Y points\n    return Buffer.from(publicKeyCreate(privateKey, false)).slice(1);\n};\n/**\n * Converts a public key to the Ethereum format.\n */\nexports.importPublic = function (publicKey) {\n    helpers_1.assertIsBuffer(publicKey);\n    if (publicKey.length !== 64) {\n        publicKey = Buffer.from(publicKeyConvert(publicKey, false).slice(1));\n    }\n    return publicKey;\n};\n/**\n * Returns the zero address.\n */\nexports.zeroAddress = function () {\n    var addressLength = 20;\n    var addr = bytes_1.zeros(addressLength);\n    return bytes_1.bufferToHex(addr);\n};\n/**\n * Checks if a given address is the zero address.\n */\nexports.isZeroAddress = function (hexAddress) {\n    helpers_1.assertIsHexString(hexAddress);\n    var zeroAddr = exports.zeroAddress();\n    return zeroAddr === hexAddress;\n};\n//# sourceMappingURL=account.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bnToRlp = void 0;\nvar bytes_1 = require(\"./bytes\");\n/**\n * Convert value from BN to RLP (unpadded buffer)\n * @param value value to convert\n */\nfunction bnToRlp(value) {\n    // Using `bn.toArrayLike(Buffer)` instead of `bn.toBuffer()`\n    // for compatibility with browserify and similar tools\n    return bytes_1.unpadBuffer(value.toArrayLike(Buffer));\n}\nexports.bnToRlp = bnToRlp;\n//# sourceMappingURL=types.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defineProperties = void 0;\nvar ethjsUtil = require(\"ethjs-util\");\nvar assert = require(\"assert\");\nvar rlp = require(\"rlp\");\nvar bytes_1 = require(\"./bytes\");\n/**\n * Defines properties on a `Object`. It make the assumption that underlying data is binary.\n * @param self the `Object` to define properties on\n * @param fields an array fields to define. Fields can contain:\n * * `name` - the name of the properties\n * * `length` - the number of bytes the field can have\n * * `allowLess` - if the field can be less than the length\n * * `allowEmpty`\n * @param data data to be validated against the definitions\n * @deprecated\n */\nexports.defineProperties = function (self, fields, data) {\n    self.raw = [];\n    self._fields = [];\n    // attach the `toJSON`\n    self.toJSON = function (label) {\n        if (label === void 0) { label = false; }\n        if (label) {\n            var obj_1 = {};\n            self._fields.forEach(function (field) {\n                obj_1[field] = \"0x\" + self[field].toString('hex');\n            });\n            return obj_1;\n        }\n        return bytes_1.baToJSON(self.raw);\n    };\n    self.serialize = function serialize() {\n        return rlp.encode(self.raw);\n    };\n    fields.forEach(function (field, i) {\n        self._fields.push(field.name);\n        function getter() {\n            return self.raw[i];\n        }\n        function setter(v) {\n            v = bytes_1.toBuffer(v);\n            if (v.toString('hex') === '00' && !field.allowZero) {\n                v = Buffer.allocUnsafe(0);\n            }\n            if (field.allowLess && field.length) {\n                v = bytes_1.unpadBuffer(v);\n                assert(field.length >= v.length, \"The field \" + field.name + \" must not have more \" + field.length + \" bytes\");\n            }\n            else if (!(field.allowZero && v.length === 0) && field.length) {\n                assert(field.length === v.length, \"The field \" + field.name + \" must have byte length of \" + field.length);\n            }\n            self.raw[i] = v;\n        }\n        Object.defineProperty(self, field.name, {\n            enumerable: true,\n            configurable: true,\n            get: getter,\n            set: setter,\n        });\n        if (field.default) {\n            self[field.name] = field.default;\n        }\n        // attach alias\n        if (field.alias) {\n            Object.defineProperty(self, field.alias, {\n                enumerable: false,\n                configurable: true,\n                set: setter,\n                get: getter,\n            });\n        }\n    });\n    // if the constuctor is passed data\n    if (data) {\n        if (typeof data === 'string') {\n            data = Buffer.from(ethjsUtil.stripHexPrefix(data), 'hex');\n        }\n        if (Buffer.isBuffer(data)) {\n            data = rlp.decode(data);\n        }\n        if (Array.isArray(data)) {\n            if (data.length > self._fields.length) {\n                throw new Error('wrong number of fields in data');\n            }\n            // make sure all the items are buffers\n            data.forEach(function (d, i) {\n                self[self._fields[i]] = bytes_1.toBuffer(d);\n            });\n        }\n        else if (typeof data === 'object') {\n            var keys_1 = Object.keys(data);\n            fields.forEach(function (field) {\n                if (keys_1.indexOf(field.name) !== -1)\n                    self[field.name] = data[field.name];\n                if (keys_1.indexOf(field.alias) !== -1)\n                    self[field.alias] = data[field.alias];\n            });\n        }\n        else {\n            throw new Error('invalid data');\n        }\n    }\n};\n//# sourceMappingURL=object.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\nvar _a = require('ethereum-cryptography/secp256k1'), ecdsaSign = _a.ecdsaSign, ecdsaRecover = _a.ecdsaRecover, publicKeyConvert = _a.publicKeyConvert;\nvar BN = require(\"bn.js\");\nvar bytes_1 = require(\"./bytes\");\nvar hash_1 = require(\"./hash\");\nvar helpers_1 = require(\"./helpers\");\n/**\n * Returns the ECDSA signature of a message hash.\n */\nexports.ecsign = function (msgHash, privateKey, chainId) {\n    var sig = ecdsaSign(msgHash, privateKey);\n    var recovery = sig.recid;\n    var ret = {\n        r: Buffer.from(sig.signature.slice(0, 32)),\n        s: Buffer.from(sig.signature.slice(32, 64)),\n        v: chainId ? recovery + (chainId * 2 + 35) : recovery + 27,\n    };\n    return ret;\n};\n/**\n * ECDSA public key recovery from signature.\n * @returns Recovered public key\n */\nexports.ecrecover = function (msgHash, v, r, s, chainId) {\n    var signature = Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32)], 64);\n    var recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    var senderPubKey = ecdsaRecover(signature, recovery, msgHash);\n    return Buffer.from(publicKeyConvert(senderPubKey, false).slice(1));\n};\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * @returns Signature\n */\nexports.toRpcSig = function (v, r, s, chainId) {\n    var recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n    return bytes_1.bufferToHex(Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32), bytes_1.toBuffer(v)]));\n};\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n */\nexports.fromRpcSig = function (sig) {\n    var buf = bytes_1.toBuffer(sig);\n    // NOTE: with potential introduction of chainId this might need to be updated\n    if (buf.length !== 65) {\n        throw new Error('Invalid signature length');\n    }\n    var v = buf[64];\n    // support both versions of `eth_sign` responses\n    if (v < 27) {\n        v += 27;\n    }\n    return {\n        v: v,\n        r: buf.slice(0, 32),\n        s: buf.slice(32, 64),\n    };\n};\n/**\n * Validate a ECDSA signature.\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\nexports.isValidSignature = function (v, r, s, homesteadOrLater, chainId) {\n    if (homesteadOrLater === void 0) { homesteadOrLater = true; }\n    var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n    var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);\n    if (r.length !== 32 || s.length !== 32) {\n        return false;\n    }\n    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n        return false;\n    }\n    var rBN = new BN(r);\n    var sBN = new BN(s);\n    if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {\n        return false;\n    }\n    if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {\n        return false;\n    }\n    return true;\n};\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\nexports.hashPersonalMessage = function (message) {\n    helpers_1.assertIsBuffer(message);\n    var prefix = Buffer.from(\"\\u0019Ethereum Signed Message:\\n\" + message.length.toString(), 'utf-8');\n    return hash_1.keccak(Buffer.concat([prefix, message]));\n};\nfunction calculateSigRecovery(v, chainId) {\n    return chainId ? v - (2 * chainId + 35) : v - 27;\n}\nfunction isValidSigRecovery(recovery) {\n    return recovery === 0 || recovery === 1;\n}\n//# sourceMappingURL=signature.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/// <reference path=\"./@types/ethjs-util/index.ts\"/>\n/**\n * Constants\n */\n__exportStar(require(\"./constants\"), exports);\n/**\n * Account class and helper functions\n */\n__exportStar(require(\"./account\"), exports);\n/**\n * Address type\n */\n__exportStar(require(\"./address\"), exports);\n/**\n * Hash functions\n */\n__exportStar(require(\"./hash\"), exports);\n/**\n * ECDSA signature\n */\n__exportStar(require(\"./signature\"), exports);\n/**\n * Utilities for manipulating Buffers, byte arrays, etc.\n */\n__exportStar(require(\"./bytes\"), exports);\n/**\n * Function for definining properties on an object\n */\n__exportStar(require(\"./object\"), exports);\n/**\n * External exports (BN, rlp, secp256k1)\n */\n__exportStar(require(\"./externals\"), exports);\n/**\n * Helpful TypeScript types\n */\n__exportStar(require(\"./types\"), exports);\n/**\n * Export ethjs-util methods\n */\n__exportStar(require(\"ethjs-util\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Address = void 0;\nvar assert = require('assert');\nvar BN = require(\"bn.js\");\nvar bytes_1 = require(\"./bytes\");\nvar account_1 = require(\"./account\");\nvar Address = /** @class */ (function () {\n    function Address(buf) {\n        assert(buf.length === 20, 'Invalid address length');\n        this.buf = buf;\n    }\n    /**\n     * Returns the zero address.\n     */\n    Address.zero = function () {\n        return new Address(bytes_1.zeros(20));\n    };\n    /**\n     * Returns an Address object from a hex-encoded string.\n     * @param str - Hex-encoded address\n     */\n    Address.fromString = function (str) {\n        assert(account_1.isValidAddress(str), 'Invalid address');\n        return new Address(bytes_1.toBuffer(str));\n    };\n    /**\n     * Returns an address for a given public key.\n     * @param pubKey The two points of an uncompressed key\n     */\n    Address.fromPublicKey = function (pubKey) {\n        assert(Buffer.isBuffer(pubKey), 'Public key should be Buffer');\n        var buf = account_1.pubToAddress(pubKey);\n        return new Address(buf);\n    };\n    /**\n     * Returns an address for a given private key.\n     * @param privateKey A private key must be 256 bits wide\n     */\n    Address.fromPrivateKey = function (privateKey) {\n        assert(Buffer.isBuffer(privateKey), 'Private key should be Buffer');\n        var buf = account_1.privateToAddress(privateKey);\n        return new Address(buf);\n    };\n    /**\n     * Generates an address for a newly created contract.\n     * @param from The address which is creating this new address\n     * @param nonce The nonce of the from account\n     */\n    Address.generate = function (from, nonce) {\n        assert(BN.isBN(nonce));\n        return new Address(account_1.generateAddress(from.buf, nonce.toArrayLike(Buffer)));\n    };\n    /**\n     * Generates an address for a contract created using CREATE2.\n     * @param from The address which is creating this new address\n     * @param salt A salt\n     * @param initCode The init code of the contract being created\n     */\n    Address.generate2 = function (from, salt, initCode) {\n        assert(Buffer.isBuffer(salt));\n        assert(Buffer.isBuffer(initCode));\n        return new Address(account_1.generateAddress2(from.buf, salt, initCode));\n    };\n    /**\n     * Is address zero.\n     */\n    Address.prototype.isZero = function () {\n        return this.buf.equals(Address.zero().buf);\n    };\n    /**\n     * Returns hex encoding of address.\n     */\n    Address.prototype.toString = function () {\n        return '0x' + this.buf.toString('hex');\n    };\n    /**\n     * Returns Buffer representation of address.\n     */\n    Address.prototype.toBuffer = function () {\n        return Buffer.from(this.buf);\n    };\n    return Address;\n}());\nexports.Address = Address;\n//# sourceMappingURL=address.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.rlphash = exports.ripemd160FromArray = exports.ripemd160FromString = exports.ripemd160 = exports.sha256FromArray = exports.sha256FromString = exports.sha256 = exports.keccakFromArray = exports.keccakFromHexString = exports.keccakFromString = exports.keccak256 = exports.keccak = void 0;\nvar _a = require('ethereum-cryptography/keccak'), keccak224 = _a.keccak224, keccak384 = _a.keccak384, k256 = _a.keccak256, keccak512 = _a.keccak512;\nvar createHash = require('create-hash');\nvar rlp = require(\"rlp\");\nvar bytes_1 = require(\"./bytes\");\nvar helpers_1 = require(\"./helpers\");\n/**\n * Creates Keccak hash of a Buffer input\n * @param a The input data (Buffer)\n * @param bits (number = 256) The Keccak width\n */\nexports.keccak = function (a, bits) {\n    if (bits === void 0) { bits = 256; }\n    helpers_1.assertIsBuffer(a);\n    switch (bits) {\n        case 224: {\n            return keccak224(a);\n        }\n        case 256: {\n            return k256(a);\n        }\n        case 384: {\n            return keccak384(a);\n        }\n        case 512: {\n            return keccak512(a);\n        }\n        default: {\n            throw new Error(\"Invald algorithm: keccak\" + bits);\n        }\n    }\n};\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\n * @param a The input data (Buffer)\n */\nexports.keccak256 = function (a) {\n    return exports.keccak(a);\n};\n/**\n * Creates Keccak hash of a utf-8 string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\nexports.keccakFromString = function (a, bits) {\n    if (bits === void 0) { bits = 256; }\n    helpers_1.assertIsString(a);\n    var buf = Buffer.from(a, 'utf8');\n    return exports.keccak(buf, bits);\n};\n/**\n * Creates Keccak hash of an 0x-prefixed string input\n * @param a The input data (String)\n * @param bits (number = 256) The Keccak width\n */\nexports.keccakFromHexString = function (a, bits) {\n    if (bits === void 0) { bits = 256; }\n    helpers_1.assertIsHexString(a);\n    return exports.keccak(bytes_1.toBuffer(a), bits);\n};\n/**\n * Creates Keccak hash of a number array input\n * @param a The input data (number[])\n * @param bits (number = 256) The Keccak width\n */\nexports.keccakFromArray = function (a, bits) {\n    if (bits === void 0) { bits = 256; }\n    helpers_1.assertIsArray(a);\n    return exports.keccak(bytes_1.toBuffer(a), bits);\n};\n/**\n * Creates SHA256 hash of a Buffer input.\n * @param a The input data (Buffer)\n */\nexports.sha256 = function (a) {\n    helpers_1.assertIsBuffer(a);\n    return _sha256(a);\n};\n/**\n * Creates SHA256 hash of a string input.\n * @param a The input data (string)\n */\nexports.sha256FromString = function (a) {\n    helpers_1.assertIsString(a);\n    return _sha256(a);\n};\n/**\n * Creates SHA256 hash of a number[] input.\n * @param a The input data (number[])\n */\nexports.sha256FromArray = function (a) {\n    helpers_1.assertIsArray(a);\n    return _sha256(a);\n};\n/**\n * Creates SHA256 hash of an input.\n * @param  a The input data (Buffer|Array|String)\n */\nvar _sha256 = function (a) {\n    a = bytes_1.toBuffer(a);\n    return createHash('sha256')\n        .update(a)\n        .digest();\n};\n/**\n * Creates RIPEMD160 hash of a Buffer input.\n * @param a The input data (Buffer)\n * @param padded Whether it should be padded to 256 bits or not\n */\nexports.ripemd160 = function (a, padded) {\n    helpers_1.assertIsBuffer(a);\n    return _ripemd160(a, padded);\n};\n/**\n * Creates RIPEMD160 hash of a string input.\n * @param a The input data (String)\n * @param padded Whether it should be padded to 256 bits or not\n */\nexports.ripemd160FromString = function (a, padded) {\n    helpers_1.assertIsString(a);\n    return _ripemd160(a, padded);\n};\n/**\n * Creates RIPEMD160 hash of a number[] input.\n * @param a The input data (number[])\n * @param padded Whether it should be padded to 256 bits or not\n */\nexports.ripemd160FromArray = function (a, padded) {\n    helpers_1.assertIsArray(a);\n    return _ripemd160(a, padded);\n};\n/**\n * Creates RIPEMD160 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n * @param padded Whether it should be padded to 256 bits or not\n */\nvar _ripemd160 = function (a, padded) {\n    a = bytes_1.toBuffer(a);\n    var hash = createHash('rmd160')\n        .update(a)\n        .digest();\n    if (padded === true) {\n        return bytes_1.setLengthLeft(hash, 32);\n    }\n    else {\n        return hash;\n    }\n};\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input.\n * @param a The input data\n */\nexports.rlphash = function (a) {\n    return exports.keccak(rlp.encode(a));\n};\n//# sourceMappingURL=hash.js.map","\"use strict\";\n/**\n * Re-exports commonly used modules:\n * * Exports [`BN`](https://github.com/indutny/bn.js), [`rlp`](https://github.com/ethereumjs/rlp).\n * @packageDocumentation\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.rlp = exports.BN = void 0;\n// TODO: This can be replaced with a normal ESM import once\n// the new major version of the typescript config package\n// is released and adopted here.\nvar BN = require(\"bn.js\");\nexports.BN = BN;\nvar rlp = require(\"rlp\");\nexports.rlp = rlp;\n//# sourceMappingURL=externals.js.map"]}